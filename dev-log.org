:tackling:

* Backlog

  ** Bugs
    - Cursor position is borken after formatting
    - when not on last line, "## " will push selection to bottom
    - debug windows build bin output (may have to do with git auth)

  ** Intuitive modal/window management
    - insert multiple tags from command option
    - Ctrl+Enter to create note without closing existing
    - Create note on the fly and return new ID in for current Note to use

  ** Hassle-free 1st run
    - generate bookmarklet from the app
    - expose config file in web for read/write
    - type "?" to reopen help menu, show placeholder hint when command bar isn't focused
    - more verbose output in server logs

  ** Knowledge capture
    - Support list 
      - syntax highlight
      - push/pull indendation, implement as a command
    - Link url displayed in footnote
      - split reference panel for incoming/outgoing links
      - parse and highlight `[linkname][N]`
      - auto update footnote content and order
      - hanlde actions
        - primary: mouse click and keyboard enter
        - secondary: travel to reference list and back
    - capture new note from url using command with multiple heading options
    - Dedupe url capture -> open existing note for existing url 

  ** Responsive UI
    - show save progress - need to break git actions into smaller api calls
    - consolidate remote sync status with local save status chip
    - a way to view status history
    - highlight todo and done keywords
    - show color bar on left when line has formatting issues

  ** Keyboard ergonomics
    - Alt + arrow to move line(s)
    - ctrl + D to select word under cursor
    - run command directly with hotkey (require refactoring)

  ** Refactoring
    - centralize event handling: keyboard > global handler > call command or call component method
    - clean up command system architecture
      - decouple command lambda from command key binding
      - Disentangle option update vs. execution
    - decouple formatting from syntax parsing
    - refactor search to be a service
    - use unifiedjs, unist, mdast to generate overlay or even manipulate editor layer
    - unit test
    - Find xargs alternative. (replace with plain javascript string manipulation?)

* DONE onbeforeunload warn unsaved notes
* DONE open existing drafts creates unwanted history record
* DONE history record is creatd before content init
* DONE do not allow empty space inside tag. For example, "this is an url: https://..." shouldn't trigger a tag highlight
* DONE tagging system (need design)
* DONE tag filtering in search
* DONE parse and display :tag: anywhere in body
* DONE reference panel use up/down instead of tab to traverse list
* DONE trap app focus
* DONE fix command auto close
* DONE fix panel travel
* DONE package into single executable
* DONE capture new note from url using bookmarklet
* DONE support metadata field, e.g. url
* DONE grid layout for panels. Reduce gutter. float command bar. Colored status bar
* DONE show status on app launch
* DONE `fa` to save and sync all
* DONE git sync through shell script
* DONE ctrl backspace/delete is broken
* DONE handle movement key on boundaries (home)
* DONE insert to editor, instead of to clipboard
* DONE insert / directly, instead of to clipboard
* DONE fix link selection color defect
* DONE clean up cursor snapshot service
* DONE open link at point
* DONE compress history when there is no model change (skip all non-model change in the middle)
* DONE undo/redo on cursor move is broken 
* DONE replace contenteditable with textarea
* DONE cursor position in status bar
* DONE cutting doesn't work
* DONE cannot hit Enter in the middle of text (trimming too greedy)
* DONE Delete from end of line is broken
* DONE Handle enter, backspace, delete manually at semantic boundary
* DONE history does not include the last edit (cannot undo then redo)
* DONE manage cursor for undo redo
* DONE pasting is not managed by history
* DONE Defer formatting until file save
* DONE undo/redo manager
* DONE fix double pasting issue due to source format
* DONE handle paste formatting
* DONE use keyboard to open links (need tech design)
* DONE prevent accidental open when yanking from command 
* DONE use keyboard to switch between Header/Content/Ref (via command)
* DONE debug focus won't return on Escape during creating new note 
* DONE fix padding in content host
* DONE convert editor to be home page
* DONE convert capture to a command
* DONE show backlinks aside
* DONE more seamless handling of focus and selection restore
* DONE refactor title to be a component
* DONE fix source map (use standalone frontend)
* DONE an output display for UI feedback (status bar, minibuffer) - localStorage for multi-page app
* DONE refactor frontend to class based architecture
* DONE use "/" as leader key
* DONE / + n + s to save
* DONE insert link (minimum: a mechnisam to get ~[title](id)~ in the clipboard)
* DONE insert line-break with `enter` key
* DONE insert heading
* DONE heading indentation - handle empty case
* DONE use custom element to handle serialization of links to markdown text
* DONE render preview mode (need to decide ssr vs csr)
* DONE edit and save note (no wysiwyg)
* DONE create new note
* DONE switch to ts-node-dev and tsc for dev inner loop
* DONE keep search result on navigate back
* DONE show title in search
* DONE display title (with yaml frontmatter)


* How to handle reference (book, website, podcast)?
- if a book points existing ideas, link to them
- if a book generates multiple new idea, capture the book, then capture individual ideas, and point from book to those ideas
  - May require an "extra paragraph as idea" workflow