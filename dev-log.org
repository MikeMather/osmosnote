:tackling:
* TODO insert to editor, instead of to clipboard
* TODO insert / directly, instead of to clipboard

:backlog:
* TODO ctrl backspace/delete is broken
* TODO handle movement key on boundaries (home, end, left, right)
* TODO git sync through shell script
* TODO support metadata field, e.g. url
* TODO a global command bus
* TODO Ctrl+Enter to create note without closing existing
* TODO Create note on the fly and return new ID in for current Note to use
* TODO tab/shift-tab to push/pull indendation, implement as a command
* TODO Alt + arrow to move line(s)
* TODO ctrl + D to select word under cursor
* TODO Cursor position is borken after formatting
* TODO when not on last line, "## " will push selection to bottom
* TODO tagging system (need design)
* TODO use unifiedjs, unist, mdast to generate overlay or even manipulate editor layer
* TODO test
* TODO run command directly with hotkey
* TODO expose config file in web for read/write
* TODO highlight todo and done keywords
* TODO type "?" to reopen help menu, show placeholder hint when command bar isn't focused


* DONE fix link selection color defect
* DONE clean up cursor snapshot service
* DONE open link at point
* DONE compress history when there is no model change (skip all non-model change in the middle)
* DONE undo/redo on cursor move is broken 
* DONE replace contenteditable with textarea
* DONE cursor position in status bar
* DONE cutting doesn't work
* DONE cannot hit Enter in the middle of text (trimming too greedy)
* DONE Delete from end of line is broken
* DONE Handle enter, backspace, delete manually at semantic boundary
* DONE history does not include the last edit (cannot undo then redo)
* DONE manage cursor for undo redo
* DONE pasting is not managed by history
* DONE Defer formatting until file save
* DONE undo/redo manager
* DONE fix double pasting issue due to source format
* DONE handle paste formatting
* DONE use keyboard to open links (need tech design)
* DONE prevent accidental open when yanking from command 
* DONE use keyboard to switch between Header/Content/Ref (via command)
* DONE debug focus won't return on Escape during creating new note 
* DONE fix padding in content host
* DONE convert editor to be home page
* DONE convert capture to a command
* DONE show backlinks aside
* DONE more seamless handling of focus and selection restore
* DONE refactor title to be a component
* DONE fix source map (use standalone frontend)
* DONE an output display for UI feedback (status bar, minibuffer) - localStorage for multi-page app
* DONE refactor frontend to class based architecture
* DONE use "/" as leader key
* DONE / + n + s to save
* DONE insert link (minimum: a mechnisam to get ~[title](id)~ in the clipboard)
* DONE insert line-break with `enter` key
* DONE insert heading
* DONE heading indentation - handle empty case
* DONE use custom element to handle serialization of links to markdown text
* DONE render preview mode (need to decide ssr vs csr)
* DONE edit and save note (no wysiwyg)
* DONE create new note
* DONE switch to ts-node-dev and tsc for dev inner loop
* DONE keep search result on navigate back
* DONE show title in search
* DONE display title (with yaml frontmatter)


* How to handle link insertion?
- use clipboard as much as possible
- when pasting, autoformat entire note

* How to handle reference (book, website, podcast)?
- if a book points existing ideas, link to them
- if a book generates multiple new idea, capture the book, then capture individual ideas, and point from book to those ideas
  - May require an "extra paragraph as idea" workflow